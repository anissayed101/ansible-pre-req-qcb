- name: Load port variables
  include_vars:
    file: "{{ role_path }}/vars/ports.json"
    name: port_data

- name: Debug Loaded Ports Data
  debug:
    var: port_data

- name: Remove existing output file if it exists
  file:
    path: /tmp/ansible_pre_req_check/ports_check.csv
    state: absent

- name: Create new output file and add headers
  copy:
    dest: /tmp/ansible_pre_req_check/ports_check.csv
    content: "source_hostname,destination_hostname,port,connection_status,service,daemon,comment,test_type\n"

- name: Initialize port check results
  set_fact:
    port_check_results: []

- name: Perform port connectivity check
  block:
    - name: Get FQDN for hosts
      set_fact:
        source_host_fqdn: "{{ hostvars[inventory_hostname]['ansible_host'] | default(inventory_hostname) }}"
        destination_host_fqdn: "{{ hostvars[test_case.0]['ansible_host'] | default(test_case.0) }}"
      loop: "{{ groups['all'] | product(port_data.keys() | list) | list }}"
      loop_control:
        loop_var: test_case
      when: inventory_hostname != test_case.0

    - name: Perform port connectivity check
      shell: "nmap -Pn -sS -p {{ test_case.1 }} {{ destination_host_fqdn }} | grep {{ test_case.1 }} | grep -oE 'open|closed|filtered'"
      register: port_check
      failed_when: false
      loop: "{{ groups['all'] | product(port_data.keys() | list) | list }}"
      loop_control:
        loop_var: test_case
      when: inventory_hostname != test_case.0

    - name: Debug Port Check Output
      debug:
        msg: "Checking connectivity from {{ source_host_fqdn }} to {{ destination_host_fqdn }} on port {{ test_case.1 }}:
              Raw Output: {{ port_check.results[loop_index].stdout | default('NO OUTPUT') }}"
      loop: "{{ groups['all'] | product(port_data.keys() | list) | list }}"
      loop_control:
        loop_var: test_case
        index_var: loop_index
      when: inventory_hostname != test_case.0

    - name: Store port check results
      set_fact:
        port_check_results: "{{ port_check_results + [[
          source_host_fqdn,
          destination_host_fqdn,
          test_case.1,
          ('ACCESSIBLE' if (port_check.results[loop_index].stdout is defined and port_check.results[loop_index].stdout | regex_search('open|closed')) else 'BLOCKED'),
          port_data[test_case.1]['Service'],
          port_data[test_case.1]['Daemon'],
          port_data[test_case.1]['Comment'],
          'Port_Connectivity_Test'
        ]] }}"
      loop: "{{ groups['all'] | product(port_data.keys() | list) | list }}"
      loop_control:
        loop_var: test_case
        index_var: loop_index
      when: inventory_hostname != test_case.0 and port_check.results[loop_index].stdout is defined

- name: Ensure port check results are not empty
  set_fact:
    port_check_results: "{{ port_check_results | default([['NO_DATA', 'NO_DATA', 'NO_DATA', 'NO_DATA', 'NO_DATA', 'NO_DATA', 'NO_DATA', 'NO_DATA']]) }}"

- name: Debug Port Check Results Before Writing to CSV
  debug:
    msg: "Final port check results: {{ port_check_results }}"

- name: Write port check results to CSV
  lineinfile:
    path: /tmp/ansible_pre_req_check/ports_check.csv
    line: "{{ item | join(',') }}"
    create: yes
  loop: "{{ port_check_results }}"
  delegate_to: localhost
  run_once: false

- name: Display the CSV Output in GitHub Actions
  command: cat /tmp/ansible_pre_req_check/ports_check.csv
  register: csv_output
  changed_when: false

- name: Show CSV Output in GitHub Actions
  debug:
    msg: "{{ csv_output.stdout_lines }}"

